const CVEDetails = require("../models/cvedetails.js");
const es = require("event-stream");
const fs = require("fs");
const https = require("https");
const JSONStream = require("JSONStream");
const logger = require("./logger.js");
const streamToMongoDB = require("stream-to-mongo-db").streamToMongoDB;
const zlib = require("zlib");

async function importCVEDetails(url, destDBConfig, year = -1) {
  return new Promise((resolve, reject) => {
    https.get(url, (response) => {
      response
        .pipe(zlib.createGunzip())
        .pipe(JSONStream.parse("CVE_Items.*"))
        .pipe(
          es.map(function (doc, callback) {
            doc._id = doc.cve.CVE_data_meta.ID;
            callback(null, doc);
          })
        )
        .pipe(streamToMongoDB(destDBConfig))
        .on("finish", resolve)
        .on("error", reject);
    });
  });
}

async function updateCVEDetails(url) {
  return new Promise(async(resolve, reject) => {
    try {
      logger.info("[CVE] Downloading CVEs from modified feed");
      await getCVEmodifiedFeed(url);
      logger.info(
        "[CVE] Done downloading modified CVE and streaming to JSON file"
      );
    } catch (error) {
      logger.error(
        `[CVE] Failed to download and parse CVE modified feed with error: ${error}`
      );
    }

    try {
      fs.readFile("nvdcve-1.1-modified.json", "utf8", (err, data) => {
        if (err) logger.error(err);
        let modifiedCVEs = JSON.parse(data);
        const numberOfCVEs = modifiedCVEs.CVE_data_numberOfCVEs;
        logger.info(`[CVE] Number of CVEs to update: ${numberOfCVEs}`);
        modifiedCVEs = modifiedCVEs["CVE_Items"];
        modifiedCVEs.forEach(async (doc) => {
          doc._id = doc.cve.CVE_data_meta.ID;
          await CVEDetails.findByIdAndUpdate(
            doc._id,
            doc,
            {
              upsert: true,
            },
            function (error, cve) {
              if (error) logger.error(error);
              else {
                logger.debug(`[CVE] Updated CVE: ${cve._id}`);
              }
            }
          ).clone();
        });
        logger.info(`[CVE] Updated ${numberOfCVEs} CVEs`);
        resolve()
      });
    } catch (error) {
      logger.error(
        `[CVE] Failed to read feed and update CVEs in modified feed with error: ${error}`
      );
      reject(error);
    }
  });
}

async function getCVEmodifiedFeed(url) {
  return new Promise((resolve, reject) => {
    const outStream = fs.createWriteStream("nvdcve-1.1-modified.json");
    https.get(url, (response) => {
      response
        .pipe(zlib.createGunzip())
        .pipe(outStream)
        .on("finish", resolve)
        .on("error", reject);
    });
  });
}

module.exports = {
  importCVEDetails,
  updateCVEDetails,
};
