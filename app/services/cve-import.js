const CVEDetails = require("../models/cvedetails.js");
const es = require("event-stream");
const fs = require("fs");
const https = require("https");
const JSONStream = require("JSONStream");
const logger = require("./logger.js");
const streamToMongoDB = require("stream-to-mongo-db").streamToMongoDB;
const zlib = require("zlib");

async function importCVEDetails(url, destDBConfig, year = -1) {
  return new Promise((resolve, reject) => {
    https.get(url, (response) => {
      response
        .pipe(zlib.createGunzip())
        .pipe(JSONStream.parse("CVE_Items.*"))
        .pipe(
          es.map(function (doc, callback) {
            doc._id = doc.cve.CVE_data_meta.ID;
            callback(null, doc);
          })
        )
        .pipe(streamToMongoDB(destDBConfig))
        .on("finish", resolve)
        .on("error", reject);
    });
  }) 
}

async function updateCVEDetails(url) {
  const outStream = fs.createWriteStream("nvdcve-1.1-modified.json");
  logger.info("[CVE] Downloading CVEs from modified feed");
  await https.get(url, (response) => {
    response
      .pipe(zlib.createGunzip())
      .pipe(outStream)
      .on("finish", () => {
        logger.info("[CVE] Done downloading modified CVE and streaming to JSON file");
        fs.readFile("nvdcve-1.1-modified.json", "utf8", (err, data) => {
          if (err) logger.info(err);
          let modifiedCVEs = JSON.parse(data);
          const numberOfCVEs = modifiedCVEs.CVE_data_numberOfCVEs;
          logger.info(`Number of CVEs to update: ${numberOfCVEs}`);
          modifiedCVEs = modifiedCVEs["CVE_Items"];
          modifiedCVEs.forEach((doc) => {
            doc._id = doc.cve.CVE_data_meta.ID;
            CVEDetails.findByIdAndUpdate(
              doc._id,
              doc,
              {
                upsert: true,
              },
              function (error, doc) {
                if (error) logger.error(error);
              }
            );
          });
          logger.info(`[CVE] Updated ${numberOfCVEs} CVEs`);
        });
      });
  });
}

module.exports = {
  importCVEDetails,
  updateCVEDetails,
};
