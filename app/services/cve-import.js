const CVEDetails = require("../models/cvedetails.js");
const https = require("https");
const JSONStream = require("JSONStream");
const zlib = require("zlib");
const es = require("event-stream");
const fs = require("fs");
const streamToMongoDB = require("stream-to-mongo-db").streamToMongoDB;
const logger = require("./logger.js");

function importCVEDetails(url, destDBConfig, year = -1) {
  // const destDBConfig = { dbURL :dbConfig.url, dbConnection: connection, collection : 'cvedetails', batchSize: 500};
  // const url = 'https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-recent.json.gz';

  https.get(url, (response) => {
    response
      .pipe(zlib.createGunzip())
      .pipe(JSONStream.parse("CVE_Items.*"))
      .pipe(
        es.map(function (doc, callback) {
          doc._id = doc.cve.CVE_data_meta.ID;
          callback(null, doc);
        })
      )
      .pipe(streamToMongoDB(destDBConfig))
      .on("finish", () => {
        if (year != -1) {
          logger.info("Done importing CVE JSON Feeds - " + year);
        } else {
          logger.info("Done importing CVE JSON Feeds");
        }
      });
  });
}

async function updateCVEDetails(url) {
  const outStream = fs.createWriteStream("nvdcve-1.1-modified.json");
  logger.info("Downloading CVEs from modified feed");
  await https.get(url, (response) => {
    response
      .pipe(zlib.createGunzip())
      .pipe(outStream)
      .on("finish", () => {
        logger.info("Done downloading modified CVE and streaming to JSON file");
        fs.readFile("nvdcve-1.1-modified.json", "utf8", (err, data) => {
          if (err) logger.info(err);
          let modifiedCVEs = JSON.parse(data);
          const numberOfCVEs = modifiedCVEs.CVE_data_numberOfCVEs;
          logger.info("Number of CVEs to update: ", numberOfCVEs);
          modifiedCVEs = modifiedCVEs["CVE_Items"];
          modifiedCVEs.forEach((doc) => {
            doc._id = doc.cve.CVE_data_meta.ID;
            CVEDetails.findByIdAndUpdate(
              doc._id,
              doc,
              {
                upsert: true,
              },
              function (err, doc) {
                if (err) logger.error(err);
              }
            );
          });
          logger.info("Updated", numberOfCVEs, "CVEs");
        });
      });
  });
}

module.exports = {
  importCVEDetails,
  updateCVEDetails,
};
